name: Build & Release app

on:
  push:
    branches: ['main']
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Install dependencies and build preact
    runs-on: ubuntu-latest
    env:
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
    outputs:
      cache-key: ${{ steps.cache-node.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Cache node_modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Decrypt encription logic
        run: node secureFile.cjs -d src/electron/utils/encryption.cjs.enc

      - name: Build preact
        run: npm run build

      - name: Upload built source for other jobs
        uses: actions/upload-artifact@v4
        with:
          name: built-src
          path: |
            node_modules
            dist
            src/electron
            package.json
            package-lock.json

  build-macos:
    name: Build macOS
    strategy:
      matrix:
        os:
          - platform: macos-latest
            name: macos-arm64
          - platform: macos-13
            name: macos-intel
    runs-on: ${{ matrix.os.platform }}
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Download built source
        uses: actions/download-artifact@v4
        with:
          name: built-src
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Install dependencies (skip if cached)
        run: npm ci

      - name: Rebuild native modules
        run: npm run rebuild

      - name: Package app
        run: npm run make

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os.name }}
          path: out/make

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download built source
        uses: actions/download-artifact@v4
        with:
          name: built-src
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Install dependencies
        run: npm ci

      - name: check NPM modules
        run: npm list

      - name: Rebuild native modules
        run: npm run rebuild

      - name: Package app
        run: npm run make

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: out/make

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    continue-on-error: true
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install RPM build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            rpm \
            fakeroot \
            libarchive-tools \
            dpkg-dev \
            build-essential

      - name: Download built source
        uses: actions/download-artifact@v4
        with:
          name: built-src
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Install dependencies
        run: npm ci

      - name: Rebuild native modules
        run: npm run rebuild

      - name: Package app (make .deb, .AppImage, etc.)
        run: npm run make

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: out/make

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            Automated build release for tag ${{ github.ref_name }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  release:
    name: Upload Binaries to GitHub Release
    runs-on: ubuntu-latest
    needs: [create-github-release, build-macos, build-windows, build-linux]
    strategy:
      matrix:
        binaries: 
          - platform: macos-arm64
            extension: dmg
            content_type: application/octet-stream
          - platform: macos-intel
            extension: dmg
            content_type: application/octet-stream
          - platform: windows-x64
            extension: exe
            content_type: application/octet-stream
          - platform: linux-x64
            extension: deb
            content_type: application/vnd.debian.binary-package
          - platform: linux-x64
            extension: rpm
            content_type: application/x-rpm
    steps:
      - uses: actions/checkout@v4

      - name: Download ${{ matrix.binaries.platform }} artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binaries.platform}}
          path: out/make

      - name: Find ${{ matrix.binaries.platform }} .${{ matrix.binaries.extension }} asset
        id: find_extension
        run: |
          file_path=$(find ./out/make -type f -name '*.${{ matrix.binaries.extension }}' | head -n 1)
          echo "Found file: $file_path"
          echo "path=$file_path" >> "$GITHUB_OUTPUT"

      - name: Upload ${{ matrix.binaries.platform }} asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-github-release.outputs.upload_url }}
          asset_path: ${{ steps.find_extension.outputs.path }}
          asset_name: app-${{ matrix.binaries.platform }}.${{ matrix.binaries.extension }}
          asset_content_type: ${{ matrix.binaries.content_type }}
