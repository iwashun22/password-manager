name: Build & Release app

on:
  push:
    branches: ['main']
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Install dependencies and build preact
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-node.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Cache node_modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Set env
        run: |
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" > .env.local

      - name: Set secret env
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > src/electron/.env

      - name: Decrypt encription logic
        run: node secureFile.cjs -d src/electron/utils/encryption.cjs.enc

      - name: Build preact
        run: npm run build

      - name: Upload built source for other jobs
        uses: actions/upload-artifact@v4
        with:
          name: built-src
          path: |
            node_modules
            dist
            src
            package.json
            package-lock.json

  build-macos-windows:
    name: Build macOS & windows
    strategy:
      matrix:
        os:
          - run: windows-latest
            name: windows
          - run: macos-latest
            name: macos
        arch: [x64, arm64]
    runs-on: ${{ matrix.os.run }}
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Download built source
        uses: actions/download-artifact@v4
        with:
          name: built-src
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Install dependencies (skip if cached)
        run: npm ci

      - name: Rebuild native modules
        run: npm exec electron-rebuild --arch=${{ matrix.arch }}

      - name: Package app
        run: npm exec electron-forge make --arch=${{ matrix.arch }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os.name }}-${{ matrix.arch }}
          path: out/make

  # build-windows:
  #   name: Build Windows
  #   runs-on: windows-latest
  #   needs: build
  #   strategy:
  #     matrix:
  #       arch: [x64, arm64]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Download built source
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: built-src
  #         path: .

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '23.11.0'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Rebuild native modules
  #       run: npm exec electron-rebuild --arch=${{ matrix.arch }}

  #     - name: Package app (make .exe)
  #       run: npm exec electron-forge make --arch=${{ matrix.arch }}

  #     - name: Upload Windows artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows-build-${{ matrix.arch }}
  #         path: out/make/${{ matrix.arch }}

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        arch: [x64, arm64]
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install RPM build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            rpm \
            fakeroot \
            libarchive-tools \
            dpkg-dev \
            build-essential

      - name: Download built source
        uses: actions/download-artifact@v4
        with:
          name: built-src
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.11.0'

      - name: Install dependencies
        run: npm ci

      - name: Rebuild native modules
        run: npm exec electron-rebuild --arch=${{ matrix.arch }}

      - name: Package app (make .deb, .AppImage, etc.)
        run: npm exec electron-forge make --arch=${{ matrix.arch }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: out/make

  release:
    name: Create GitHub Release & upload binaries
    runs-on: ubuntu-latest
    needs: [build-macos-windows, build-linux]
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Download macOS ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: ./out/make/macos-${{ matrix.arch }}

      - name: Download Windows ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: ./out/make/windows-${{ matrix.arch }}

      - name: Download Linux ${{ matrix.arch }}
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: ./out/make/linux-${{ matrix.arch }}

      - name: log files
        run: find ./out/make -maxdepth 5

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            Automated build release for tag ${{ github.ref_name }}

      - name: Upload macOS assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/macos/**/*.dmg
          asset_name: app-macos.dmg
          asset_content_type: application/octet-stream

      - name: Upload Windows assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/windows/**/*.exe
          asset_name: app-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux .deb asset
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/linux/**/*.deb
          asset_name: app-linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux .AppImage asset
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/linux/**/*.AppImage
          asset_name: app-linux.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux .rpm asset
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/linux/**/*.rpm
          asset_name: app-linux.rpm
          asset_content_type: application/x-rpm